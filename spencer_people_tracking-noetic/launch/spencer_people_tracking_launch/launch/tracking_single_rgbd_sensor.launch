<launch>
    <!-- Launch file arguments -->
    <arg name="height_above_ground" default="1.70"/>  <!-- in meters, assumes a horizontally oriented RGB-D sensor; important for accurate detection -->
    <arg name="load_driver" default="false"/>  <!-- set to false if you are already running OpenNi from elsewhere -->
    <arg name="load_realsense_driver" default="false"/>  <!-- set to false if you are already running OpenNi from elsewhere -->
    <arg name="visualization" default="true"/> <!-- start Rviz with predefined configuration? -->
    <arg name="dummy_transforms" default="true"/> <!-- publish TF transform for sensor to groundplane -->
    <arg name="use_openni1" default="false"/> <!-- compatibility for Kinect v1 -->
    <arg name="use_upper_body_detector" default="true"/> <!-- use depth-template-based upper-body detector? -->
    <arg name="use_pcl_detector" default="false"/> <!-- use ROI-HOG detector from PCL? Cannot be combined with upper-body detector! -->
    <arg name="use_hog_detector" default="false"/> <!-- use RGB groundHOG detector? Requires cudaHOG library-->
    <arg name="map_file" default="$(find wheelchair_simulations)/maps/meam_simulation_map.yaml"/>

    <!-- TF frame IDs used by some detectors, and tracking components -->
    <arg name="base_footprint_frame_id" default="base_link"/>  <!-- name of the robot's base frame after projection onto the ground plane -->
    <arg name="world_frame_id" default="odom"/>  <!-- this is the fixed tracking frame -->

    <!-- Run the Map Server -->
    <!-- <node pkg="map_server" type="map_server" name="map_server" args="$(arg map_file)"/>  -->

    <!-- <node pkg="tf" type="static_transform_publisher" name="odom_to_map"
    args="0 0 0.16     0 0 0   /map /odom 100" /> -->

    <!-- Run Realsense driver if desired -->
    <!-- <group ns="spencer/sensors" if="$(arg load_realsense_driver)"> -->
        <!-- <arg name="driver_launchfile" value="$(find realsense2_camera)/launch/rs_rgbd.launch"/>  Realsense -->
        <!-- <include file="$(arg driver_launchfile)"> -->
            <!-- <arg name="camera" value="camera"/> -->
        <!-- </include> -->
    <!-- </group> -->

    <!-- Set ground plane distance -->
    <rosparam param="/spencer/perception_internal/people_detection/ground_plane/distance" subst_value="true">$(arg height_above_ground)</rosparam>

    <!-- Set up dummy transforms into an imaginary robot and odom frame -->
    <group if="$(arg dummy_transforms)">
        <node name="tf_base_footprint" pkg="tf" type="static_transform_publisher" args="0 0 $(arg height_above_ground) 0 0 0 $(arg base_footprint_frame_id) rgbd_front_top_link 10"/>
        <node name="tf_odom"           pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 odom $(arg base_footprint_frame_id) 10"/>
    </group>

    <!-- Detectors -->
    <group>
        <include file="$(find spencer_people_tracking_launch)/launch/detectors/front_rgbd_detectors.launch">
            <arg name="upper_body" default="$(arg use_upper_body_detector)"/>
            <arg name="pcl_detector" value="$(arg use_pcl_detector)"/>
            <arg name="hog" default="$(arg use_hog_detector)"/>
            <arg name="base_footprint_frame_id" value="$(arg base_footprint_frame_id)"/>      
        </include>
    </group>

    <!-- <remap from="/camera/rgb/image_rect_color" to="/camera/color/image_raw" /> -->

   <!-- Laser detectors -->
    <include file="$(find spencer_people_tracking_launch)/launch/detectors/leg_detectors.launch"/> 

    <!-- People tracking -->
    <include file="$(find spencer_people_tracking_launch)/launch/tracking/freiburg_people_tracking.launch">
        <arg name="rgbd" default="true"/>
        <arg name="laser_low_confidence_detections" default="true"/>
        <arg name="base_footprint_frame_id" value="$(arg base_footprint_frame_id)"/>
        <arg name="world_frame_id" value="$(arg world_frame_id)"/>
    </include>

    <!-- As there is not yet any high-recall/low-confidence detector for RGB-D, and we are not using laser, tracks may get deleted too quickly in case of missed detections.
         To deal with this, for the moment, we increase the maximum number of occluded frames to be  a bit more tolerant towards missed detections.
         This works fine in uncrowded environments which are not very dynamic. -->
    <rosparam param="/spencer/perception_internal/people_tracking/srl_nearest_neighbor_tracker/max_occlusions_before_deletion">100</rosparam>
    <rosparam param="/spencer/perception_internal/people_tracking/srl_nearest_neighbor_tracker/max_occlusions_before_deletion_of_mature_track">300</rosparam>

    <!-- Group tracking -->
    <!-- <include file="$(find spencer_people_tracking_launch)/launch/tracking/group_tracking.launch"/>  -->

    <!-- RViz visualization -->
    <node name="tracking_visualization_rviz" pkg="rviz" type="rviz" args="-d $(find spencer_people_tracking_launch)/rviz/tracking-single-rgbd-sensor.rviz" if="$(arg visualization)"/>

</launch>
